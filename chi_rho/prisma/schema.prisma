// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  caloryEntries   CaloryEntry[]
  exerciseEntries ExerciseEntry[]
  jurnalEntries   JurnalEntry[]
  foodEntries     FoodEntry[]
  workoutPlans    WorkoutPlan[]
  bodyMeasurements BodyMeasurement[]
  goals           Goal[]
}


model CaloryEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  calories  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExerciseEntry {
  id        String   @id @default(auto()) @map("_id")@db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  exercise  String
  duration  Int      // in minutes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JurnalEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  entry     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  food      String
  calories  Int
  servings  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
  @@map("food_entry")
}

model WorkoutPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workouts    Workout[]
}

model Workout {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  workoutPlanId String   @db.ObjectId
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  name          String
  date          DateTime
  exercises     Exercise[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Exercise {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  workoutId String   @db.ObjectId
  workout   Workout  @relation(fields: [workoutId], references: [id])
  name      String
  sets      Int
  reps      Int
  weight    Float?
  duration  Int?     // in seconds
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BodyMeasurement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  weight    Float?
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  description String
  targetDate  DateTime?
  achieved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



